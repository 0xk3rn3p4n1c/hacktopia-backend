generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Users {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  userId          String           @unique @default(uuid())
  email           String           @unique
  password        String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  profiles        Profiles?
  oneTimePassword OneTimePassword?
  TeamMembers     TeamMembers[]
  Submissions     Submission[]
  JoinRequest     JoinRequest[]
}

model Profiles {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  userId             String        @unique
  userName           String        @unique
  userProfilePicture String?
  userRanking        userRanking   @default(unranked)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  user               Users         @relation(fields: [userId], references: [userId], onDelete: Cascade)
  TeamMembers        TeamMembers[]
}

model OneTimePassword {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @unique
  otp       String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  expiry    DateTime
  user      Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model Team {
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  teamId            String        @unique @default(uuid())
  teamName          String        @unique
  teamCaptain       String
  teamMotto         String
  teamCountry       String
  teamPoints        Int           @default(0)
  teamRanking       teamRanking   @default(unranked)
  teamCapturedFlags Int           @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  teamMembers       TeamMembers[]
  submissions       Submission[]
  JoinRequest       JoinRequest[]
}

model TeamMembers {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId                 String
  userId                 String
  userRole               String
  userPoints             Int      @default(0)
  userChallengesAnswered String[]
  userCapturedFlags      Int      @default(0)
  joinedAt               DateTime @default(now())
  team                   Team     @relation(fields: [teamId], references: [teamId], onDelete: Cascade)
  user                   Users    @relation(fields: [userId], references: [userId], onDelete: Cascade)
  profile                Profiles @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model JoinRequest {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  teamId    String
  userId    String
  status    String   @default("pending") // pending, accepted, rejected
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  team Team  @relation(fields: [teamId], references: [teamId], onDelete: Cascade)
  user Users @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

model CTFEvent {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  eventId      String      @unique @default(uuid())
  eventName    String      @unique
  description  String
  startDate    DateTime
  endDate      DateTime
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  challenges   Challenge[] // Relationship to the Challenge model
}

model Challenge {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  challengeId String       @unique
  title       String
  description String
  points      Int
  categoryId  String
  ctfEventId  String?      // Optional foreign key to link the challenge to a CTF event
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  category    Category     @relation(fields: [categoryId], references: [categoryId], onDelete: Cascade)
  flags       Flag[]
  submissions Submission[]
  ctfEvent    CTFEvent?    @relation(fields: [ctfEventId], references: [eventId], onDelete: Cascade) // Optional relation to CTFEvent
}

model Category {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  categoryId String      @unique
  name       String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  challenges Challenge[]
}

model Flag {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  flagId      String    @unique
  challengeId String    @unique
  flag        String    @unique
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  challenge   Challenge @relation(fields: [challengeId], references: [challengeId], onDelete: Cascade)
}

model Submission {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  submissionId String    @unique
  challengeId  String
  teamId       String
  userId       String
  flag         String
  isCorrect    Boolean   @default(false)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  challenge    Challenge @relation(fields: [challengeId], references: [challengeId], onDelete: Cascade)
  team         Team      @relation(fields: [teamId], references: [teamId], onDelete: Cascade)
  user         Users     @relation(fields: [userId], references: [userId], onDelete: Cascade)
}

enum teamRanking {
  unranked // < 500
  script_kiddies // 2500
  flag_hunters // 5000
  exploit_engineers // 10000
  shell_seekers // 30000
  flag_masters // 35000
  zero_day_zealots // 45000
  ctf_legends // 50000
  ctf_grandmasters // 75000
  ctf_immortal_experts // 100000
  ctf_god // 200000
}

enum userRanking {
  unranked // < 500
  code_novice // 2500
  shell_scout // 5000
  binary_builder // 10000
  exploit_artisan // 30000
  root_ranger // 35000
  cyber_gladiator // 45000
  ctf_phoenix // 50000
}
